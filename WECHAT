import itchat
from itchat.content import *
import os
import time
from playsound import playsound
import xml.dom.minidom
import threading
from flask import Flask, make_response
temp = 'E://python//微信脚本//消息' + '//' + '撤回的消息'
new_temp = 'E://python//微信脚本//消息' + '//' + '聊天记录'
tp = r"E://python/微信脚本//消息/撤回的消息"
ntp = r"E://python//微信脚本//消息//聊天记录"
dict = {}
filepath=r"E:/Python/wechat/files"
imagespath=r"E:\Python\wechat\files\230119-203555.png"
filepath=r"E:\Python\wechat\files\x\1.txt"
#接收文本消息
@itchat.msg_register([TEXT, PICTURE, FRIENDS, CARD, MAP, SHARING, RECORDING, ATTACHMENT, VIDEO],isFriendChat=True)
def resever_info(msg):
    global dict
    # print('------------------------------------------------------------')
    # print(msg)
    # print('------------------------------------------------------------')
    info = msg['Text']
    msgId = msg['MsgId']
    info_type = msg['Type']
    name = msg['FileName']
    sex =itchat.search_friends(userName=msg['FromUserName'])['Sex']
    fromUser = itchat.search_friends(userName=msg['FromUserName'])['RemarkName']
    ticks = msg['CreateTime']
    time_local = time.localtime(ticks)
    dt = time.strftime("%Y-%m-%d %H:%M:%S", time_local)
    dict[msgId] = {"info": info, "info_type": info_type, "name": name, "fromUser": fromUser, "dt": dt}
    msg_type = dict[msgId]['info_type']
    
    if msg_type == 'Text':
       # print(dict)
        text_info = dict[msgId]['info']
        fromUser = dict[msgId]['fromUser']
        dt = dict[msgId]['dt']
        meginfo(sex,dt,fromUser,text_info)

    elif msg_type == 'Picture':
        msg.download(filepath+'/'+msg.fileName)#下载文件 （地址为：filepath）
        picture_info = dict[msgId]['info']
        fromUser = dict[msgId]['fromUser']
        dt = dict[msgId]['dt']
        info_name = dict[msgId]['name']
        picture_info(new_temp + '/' + info_name)
        meginfo(sex,dt,fromUser,picture_info)
    elif msg_type == 'Recording':
        recording_info = dict[msgId]['info']
        info_name = dict[msgId]['name']
        fromUser = dict[msgId]['fromUser']
        dt = dict[msgId]['dt']
        recording_info(new_temp + '/' + info_name)
        playsound(new_temp + '/' + info_name)
        meginfo(sex,dt,fromUser,recording_info)


#发送文本消息
def SendTextMessage(fromUser,sendmeg):
    users=itchat.search_friends(fromUser)
    username=users[0]['UserName']
    itchat.send_msg(msg=sendmeg,toUserName=username)
#发送图片
def SendimagesMessage(fromUser,imagespath):
    users=itchat.search_friends(fromUser)
    username=users[0]['UserName']
    itchat.send_image(fileDir=imagespath,toUserName=username)
    print("图片已经发给【{}】".format(fromUser))
#发送文件
def SendfileMessage(fromUser,filepath):
    users=itchat.search_friends(fromUser)
    username=users[0]['UserName']
    itchat.send_file(fileDir=filepath,toUserName=username)
    print("文件已经发给【{}】".format(fromUser))

#控制台展示
def meginfo(sex,dt,fromUser,meginfos):
    if len(fromUser)==0 :
             print('时间:{} | You reply msg:【{}】 '.format(dt,meginfos))
    else:
        match sex:
            case 2:
                   print('时间:{} | Girl：[{}] sed msg:【{}】 '.format(dt,fromUser,meginfos))
            case 1:
                   print('时间:{} | Boy：[{}] sed msg:【{}】 '.format(dt,fromUser,meginfos))
            case 0:
                   print('时间:{} | Someone：[{}] sed msg:【{}】 '.format(dt,fromUser,meginfos))
    if fromUser=='Francescad':
            print("------有重要信息----------------")
            print('时间:{} | my lover [{}] sed msg:【{}】 '.format(dt,fromUser,meginfos))
            sendmeg="go go  go"
            # SendMessage(fromUser,sendmeg)
            SendimagesMessage(fromUser,imagespath)
            SendfileMessage(fromUser,filepath)

@itchat.msg_register(NOTE)
def note_info(msg):
    content = msg['Content']
    doc = xml.dom.minidom.parseString(content)
    result = doc.getElementsByTagName("msgid")
    msgId = result[0].childNodes[0].nodeValue
    msg_type = dict[msgId]['info_type']
    if '撤回了一条消息' in msg['Text']:
        if msg_type == 'Recording':
            recording_info = dict[msgId]['info']
            info_name = dict[msgId]['name']
            fromUser = dict[msgId]['fromUser']
            dt = dict[msgId]['dt']
            recording_info(temp + '/' + info_name)
            send_msg = '发送人:' + fromUser + '\n' + '发送时间:' + dt + '\n' + '撤回了一条语音'
            itchat.send(send_msg, 'filehelper')
            itchat.send_file(temp + '/' + info_name, 'filehelper')
            del dict[msgId]
            print(fromUser + " 撤回了一条消息")
        elif msg_type == 'Text':
            text_info = dict[msgId]['info']
            fromUser = dict[msgId]['fromUser']
            dt = dict[msgId]['dt']
            send_msg = '发送人:' + fromUser + '\n' + '发送时间:' + dt + '\n' + '撤回内容:' + text_info
            itchat.send(send_msg, 'filehelper')
            del dict[msgId]
            print(fromUser + " 撤回了一条消息")
        elif msg_type == 'Picture':
            picture_info = dict[msgId]['info']
            fromUser = dict[msgId]['fromUser']
            dt = dict[msgId]['dt']
            info_name = dict[msgId]['name']
            picture_info(temp + '/' + info_name)
            send_msg = '发送人:' + fromUser + '\n' + '发送时间:' + dt + '\n' + '撤回了一张图片'
            itchat.send(send_msg, 'filehelper')
            itchat.send_file(temp + '/' + info_name, 'filehelper')
            del dict[msgId]
            print(fromUser + " 撤回了一条消息")
 
 
def clear_cache(path):
    ls = os.listdir(path)
    for i in ls:
        c_path = os.path.join(path, i)
        if os.path.isdir(c_path):
            clear_cache(c_path)
        else:
            os.remove(c_path)
def qrCallback(uuid, status, qrcode):
    if status == '0':
        global qrSource
        qrSource = qrcode
    elif status == '200':
        qrSource = 'Logged in!'
    elif status == '201':
        qrSource = 'Confirm'
qrSource = ''

# def start_flask():
#     flaskApp = Flask('itchat')
#     @flaskApp.route('/')
#     def return_qr():
#         if len(qrSource) < 100:
#             return qrSource
#         else:
#             response = make_response(qrSource)
#             response.headers['Content-Type'] = 'image/jpeg'
#             return response
#     flaskApp.run()
# flaskThread = threading.Thread(target=start_flask)
# flaskThread.setDaemon(True)
# flaskThread.start()
 
if __name__ == '__main__':
    if not os.path.exists(temp):
        os.mkdir(temp)
    if not os.path.exists(new_temp):
        os.mkdir(new_temp)
    clear_cache(tp)
    clear_cache(ntp)
    itchat.auto_login(hotReload=True)
    #itchat.auto_login(True,qrCallback=qrCallback)
    itchat.run()